{"remainingRequest":"/Users/bpliska/Projects/tofail/node_modules/ts-loader/index.js??ref--16-1!/Users/bpliska/Projects/tofail/packages/server/src/index.ts","dependencies":[{"path":"/Users/bpliska/Projects/tofail/packages/server/src/index.ts","mtime":1553100578954},{"path":"/Users/bpliska/Projects/tofail/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/bpliska/Projects/tofail/node_modules/ts-loader/index.js","mtime":1545640398000}],"contextDependencies":[],"result":["import startServer from './server';\ntry {\n    var PORT_1 = 8080;\n    var server_1;\n    if (module.hot) {\n        module.hot.accept();\n        module.hot.dispose(function (data) {\n            if (server_1) {\n                server_1.close();\n            }\n            data.reloaded = true;\n        });\n    }\n    startServer(PORT_1).then(function (serverInstance) {\n        if (!module.hot || !module.hot.data) {\n            console.log(\"GraphQL Server is now running on http://localhost:\" + PORT_1);\n        }\n        server_1 = serverInstance;\n    });\n}\ncatch (e) {\n    console.error(e);\n}\n",{"version":3,"file":"/Users/bpliska/Projects/tofail/packages/server/src/index.ts","sourceRoot":"","sources":["/Users/bpliska/Projects/tofail/packages/server/src/index.ts"],"names":[],"mappings":"AAEA,OAAO,WAAW,MAAM,UAAU,CAAC;AAEnC,IAAI;IACF,IAAM,MAAI,GAAG,IAAI,CAAC;IAElB,IAAI,QAAc,CAAC;IAEnB,IAAI,MAAM,CAAC,GAAG,EAAE;QACd,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;QACpB,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,UAAA,IAAI;YACrB,IAAI,QAAM,EAAE;gBACV,QAAM,CAAC,KAAK,EAAE,CAAC;aAChB;YACD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACvB,CAAC,CAAC,CAAC;KACJ;IAED,WAAW,CAAC,MAAI,CAAC,CAAC,IAAI,CAAC,UAAA,cAAc;QACnC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE;YACnC,OAAO,CAAC,GAAG,CAAC,uDAAqD,MAAM,CAAC,CAAC;SAC1E;QACD,QAAM,GAAG,cAAc,CAAC;IAC1B,CAAC,CAAC,CAAC;CACJ;AAAC,OAAO,CAAC,EAAE;IACV,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;CAClB","sourcesContent":["import { Server } from 'http';\n\nimport startServer from './server';\n\ntry {\n  const PORT = 8080;\n\n  let server: Server;\n\n  if (module.hot) {\n    module.hot.accept();\n    module.hot.dispose(data => {\n      if (server) {\n        server.close();\n      }\n      data.reloaded = true;\n    });\n  }\n\n  startServer(PORT).then(serverInstance => {\n    if (!module.hot || !module.hot.data) {\n      console.log(`GraphQL Server is now running on http://localhost:${PORT}`);\n    }\n    server = serverInstance;\n  });\n} catch (e) {\n  console.error(e);\n}\n"]}]}